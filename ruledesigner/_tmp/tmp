
//	this.doEventAction = function(_task, _objInfo, _eventInfo) {
//
//		console.log('xdoEventAction Method: ' + _task);
//		console.log($(_eventInfo.target).hasClass('connector-right'));
//		console.log($(_eventInfo.target).hasClass('connector-left'));
//
//		var task = _task.split('.', 2);
//
//		if (task[0] === undefined || task[0] == null || task[1] == undefined
//				|| task[1] == null)
//			return;
//
//		switch (task[0]) {
//		case 'drop':
//			if (doDropEvents(task[1], _objInfo, _eventInfo))
//				view.actualize();
//			break;
//		}
//		;
//	};
//
//	var doDropEvents = function(_task, _objInfo, _eventInfo) {
//		var task = new Object();
//		task.method = _task.split('.', 2);
//		task.source = _objInfo.attr('rel');
//
//		var log = $(_eventInfo.target).parent('div').attr('rel');
//		if ($(_eventInfo.target).attr('rel') !== undefined)
//			task.target = $(_eventInfo.target).attr('rel').split('.');
//
//		switch (task.method[0]) {
//		case 'ruleTarget':
//			var Rule = eval('RuleObject.' + task.target[0]);
//			if (Rule === undefined)
//				return false; // Break up if match, whom circle injection
//
//			if (eval('Devices.' + task.source) !== undefined) {
//				eval('var _data = Devices.' + task.source);
//				var _obj = Object.clone(_data);
//				console.log(_obj);
//				var target = task.target[1];
//				if ( (eval('/'+Vars.rel_sensorlist_prefix+'([0-9])*/')).test(target) )
//					return Rule.getSensorList().addObject(_obj, task.target);
//				
//				if ( (eval('/'+Vars.rel_actorlist_prefix+'([0-9])*/')).test(target) )
//					return Rule.getActorList().addObject(_obj, task.target);
//				
//			} else if (eval('RuleObject.' + task.source) !== undefined) { //
//				eval('var _data = RuleObject.' + task.source);
//				var _obj = Object.clone(_data);
//				console.log(_obj);
//
//				if( task.target[1] == 'actor' )
//					return Rule.getActorList().addObject(_obj, task.target);
//			}
//			break;
//
//		case 'trash':
//			if (_objInfo._DEVICE_ID !== undefined) { // Is a device or a device similar object
//				if (eval('RuleObject.SensorList.' + _objInfo_DEVICE_ID) !== undefined) // Is in ActorList
//					return eval('RuleObject.Sensorlist.deleteObject('
//							+ _objInfo.DEVICE_ID + ')');
//
//				if (eval('RuleObject.ActorList.' + _objInfo_DEVICE_ID) !== undefined) // Is in Sensorlist
//					return eval('RuleObject.Actorlist.deleteObject('
//							+ _objInfo.DEVICE_ID + ')');
//			}
//
//			if (eval('RuleObject.' + _objInfo._RULE_ID) !== undefined) { // Is rule
//				eval('delete RuleObject.' + _objInfo._RULE_ID);
//				return true;
//			}
//			return false;
//			break;
//		default:
//			return false;
//		}
//		;
//	};


	
	

//function LinkedList() {
//
//	var Count = Counter();
//
//	// Store the prototype for use the verifying
//	var _proto_ = null;
//	
//	var rel_prefix = 'ITEM';
//	
//	if(arguments[0] !== undefined){
//		rel_prefix = arguments[0];
//	}
//	var _verify_prototype;
//	// Set the prototype on which is test, if the param is taken over.
//	if (_verify_prototype !== undefined)
//		_proto_ = _verify_prototype;
//
//	/**
//	 * Funkction to verify
//	 * 
//	 * @param prototype
//	 */
//	var verify = function(_obj) {
//		return _obj.prototype.isPrototypeOf(_proto_);
//	};
//
//	var ObjectList = new Object();
//	
//	var Root = null;
//
//	/**
//	 * Item-Klasse
//	 */
//	function ManagedItem(_obj) {
//
//		var _UNIQUE_ID = rel_prefix + Count();
//
//		this.PrevObj = null;
//
//		this.FollowObj = null;
//
//		this.UpObj = null;
//
//		this.DownObj = null;
//
//		this.Item = _obj;
//
//		this.TimerObj = null;
//
//		this.getUID = function() {
//			return _UNIQUE_ID;
//		};
//	};
//
//	ManagedItem.prototype = {
//
//		execCallback: function(callback){
//			
//		},
//		/**
//		 * 
//		 */
//		getItem : function() {
//			return this.Item;
//		},
//
//		/**
//		 * Set the linked object which is in previous
//		 * 
//		 * @param _obj
//		 * @returns
//		 */
//		setPrevObj : function(_obj) {
//
//			if (this.PrevObj != null) { // If position occupied
//				tmp = this.PrevObj; // store placed object
//				_obj.PrevObj = tmp; // set the old as previous of the new
//				tmp.FollowObj=_obj; // set the new object as followed
//			}
//			_obj.FollowObj = this;
//			return this.PrevObj = _obj; // set the new object as previous
//
//		},
//		/**
//		 * Set the linked object which is following up
//		 * 
//		 * @param _obj
//		 */
//		setFollowObj : function(_obj) {
//
//			if (this.FollowObj != null) { // If position occupied
//				tmp = this.FollowObj; // store placed object
//				_obj.FollowObj = tmp; // set the old as follower of the new
//				tmp.PrevObj = _obj; // set the new object as previous element of
//									// the old
//			}
//			_obj.PrevObj = this;
//			return this.FollowObj = _obj; // set the new object as followed
//		},
//		/**
//		 * Returns the Representation of the stored object
//		 * 
//		 * @param _obj
//		 * @returns string
//		 */
//		toString : function(_obj) {
//			_obj.toString();
//		}
//	};
//
//	this.getRootItem = function() {
//		return Root;
//	};
//	
//	this.getObjectsAsList = function() {
//		return ObjectList;
//	};
//	
//	this.addObject = function(_mItem, _rel) {
//		
//		var newObj = new ManagedItem(_mItem);
//		
//		eval('ObjectList.' + newObj.getUID() + '= newObj');
//		
//		if (Root != null) {
//			eval('ObjectList.' + _rel[1] + '.setFollowObj(newObj)');
//				return true;
//		} else {
//			Root = newObj;
//			return true;
//		}
//	};
//
//	this.removeObject = function(_key) {
//	
//		// Remove object references
//		var tmp = ObjectList[key];
//		
//		//TODO - Handle removing root element
//		
//		// Is re-linking the exiting objects
//		if (tmp.PrevObj != null && tmp.FollowObj != null){
//			tmp.PrevObj.FollowObj = tmp.FollowObj;
//			tmp.FollowObj.PrevObj = tmp.PrevObj;
//		} else if (tmp.PrevObj != null) {
//		 tmp.PrevObj.FollowObj = null;
//		} else if (tmp.FollowObj != null) {
//		 tmp.FollowObj.PrevObj = null;
//		}
//		
//		if (tmp.UpObj != null) {
//			delete tmp.UpObj;
//		}
//		delete tmp;
//		
//		
//	};
//
//	this.searchObject = function(_rel) {
//		console.log('LinkedList.searchObject: ' + _rel);
//		if( ObjectList[_rel]  !== undefined )
//			return ObjectList[_rel];
//	};
//	
//	this.doCallForEach = function( func, callback){
//		
//	}
//
//};


					var quad_size_of_connectors = 21;
					$('div.rule-obj-box')
							.each(
									function() {

										var border = 1;
										var width = $(this).width() + 20 + 2
												* border;
										var height = $(this).height() + 10 + 2
												* border;

										var connector_padding = (quad_size_of_connectors - border)
												/ 2 + 2 * border;

										$('span.connector').css('width', 20);
										$('span.connector').css('height', 20);

										$('span.connector').css('border',
												border + 'px solid #aaa');

										$('span.connector-left', this).css(
												'left', 0 - connector_padding);
										$('span.connector-left', this).css(
												'top',
												height / 2 - connector_padding);
										$('span.connector-right', this).css(
												'right', 0 - connector_padding);
										$('span.connector-right', this).css(
												'top',
												height / 2 - connector_padding);
										$('span.connector-top', this).css(
												'top', 0 - connector_padding);
										$('span.connector-top', this).css(
												'left',
												width / 2 - connector_padding);
										$('span.connector-bottom', this)
												.css('bottom',
														0 - connector_padding);
										$('span.connector-bottom', this).css(
												'left',
												width / 2 - connector_padding);

									});
				});